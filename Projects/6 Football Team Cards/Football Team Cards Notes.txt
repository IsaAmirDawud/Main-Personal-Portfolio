In this project I will build a set of football team cards and learn about nested objects, object destructuring, default perameters, event listeners, and switch statements. 

The the start of the html element Inside a div with a class of "team-stats" is four p tags with the following text: 'Team:', 'Sport:', 'Year:', 'Head coach:'. Following each text is an empty span tag (inside the p tags) with an id that corrosponds to the text inside the p tag. I will be saving these span elements into the variables: "teamName", "typeOfSport", "worldCupYear", and "headCoach". 

There is a div with an id of "player-cards" that holds several divs. Every div (with a class of "player-cards") has a h2 tag and 3 p tags inside of them. I will save the div with the id of "player-cards" inside a variable called "playerCards". 

There is a select element with an id of "players" that corrosponds to a label that has the the text "Filter teamates:". I will save the select element with an id of "players" to a variable called playersDropdownList. 

Now it's time to build out the data structure that will hold all of the information for your football team. To start, I will create a opject called myFavoriteFootballTeam. This object will have several properties. The properties will be as followed: "team", "sport", "year", "isWorldCupWinner", "headCoach", and "players". The headCoach property's value is an object with two properties: "coachName", and "matches". The players property's value is an array of objects. Each object has the following properties: "name", "position", "number", "isCaptain", and "nickname". I will call the object "myFavoriteFootballTeam" inside Object.freeze which will "freeze" the object and prevent any changes being made to it.

Next I will access the properties "sport", and "team", "year", and "players" using object destructuring. I will also use object destructuring to acces the coachName property within the headCoach object property. 

Now I will start displaying the team's information on the screen. To do this I will the textContent on the typeOfSport variable (the span element next to the "Sport:" text) and assign its value of sport which has been deconstructed from the "myFavoriteFootballTeam" object. I will use textContent on the "teamName", "worldCupYear", and "headCoach" variable's to display the team, year, and players. 

Now I will start building out the function that will show player cards based on the selections made by the user in the Filter Teammates dropdown menu. To start I will be creating an empty arrow function called setPlayerCards with a parameter called arr that has a default value of players. The players variable is an array that has been deconstructed from the myFavoriteFootballTeam object. So by default this array will be passed through this function as an argument. 

Inside the function I will create a new array that will be responsible for adding the player card information to the page. To do this I will use the innerHTML property on the playerCards element (the main div) and add/assign the map method appended to the parameter arr which will take an empty callback function. The arr parameter contains a series of objects that each contains a "name", "position", "number", "isCaptain", and a "nickname" property. In order to access each of these properties inside the callback funciton, I will need to use object destructuring to unpack them into variables. I will utilize object destructuring inside the callback expression. Inside the body of the callback function, I will add template literals which will contain content for the player cards. Because the .map() method will return a new array of palyer-card items separated by commas, I will chain a .join() method to the .map() method. I will also pass an empty string as the argument for .join() to remove the commas. 

The next step is to create a function that will detect when a user makes a selection from the playersDropdownList. 
To do this I will use a .addEventListener() method on the playersDropdownList, and pass in the "change" event type and an empty callback function with "e" as a parameter which will represent an object which contains the information for that event. Inside the event listener's function body I need to reset the content for the playerCards element. To do this I will use the innerHTML method on the playerCards div and set the contents to an empty string. I will then add a switch statement which will check for the user's selection from the player dropdown menu and filter out cards based on the player's positions (each option or select elements value). The expression of the switch statement will be the event's target value. If the user selects Nicknames which will be the option 'nickname', I will call the setPlayerCards function (which adds player card information to the page) with an argument of players (an array of objects containing information about the players) with the .filter() appended to the end. The filter method will return a new array of objects that don't contain an object with the nickname propety's value of null. The next case will be for the option that has a value of "forwar". Again the setPlayerCards function will be called with the filter method append onto the players array. The filter method will return a new array of objects where the position's property's value is "forward". The same pattern for the values "midfielder", "defender", and "goalkeeper" will continue for each case. Finally the default clause will be the setPlayerCards function being called without any arguments passed in. 